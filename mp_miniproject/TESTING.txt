Path_planning

#step1#
#correct cases#

#test1#
Command:
Run  ./path-step1 grid-map0.txt
You will see that it prints the output: 
(0,0) (0.5,0) (1,0) (0,0.5) (0.5,0.5) (1,0.5) 
0: 1,0.5 3,0.5 4,0.707107 
1: 0,0.5 2,0.5 3,0.707107 4,0.5 5,0.707107 
2: 1,0.5 4,0.707107 5,0.5 
3: 0,0.5 1,0.707107 4,0.5 
4: 0,0.707107 1,0.5 2,0.707107 3,0.5 5,0.5 
5: 1,0.707107 2,0.5 4,0.5 

which is correct that it matches the output of the example shown in the path_planning.txt


#test2#
Command:
Run ./path-step1 grid-map.txt
You will see that it prints the output: 
(0,0) (0.5,0) (1,0) (1.5,0) (2,0) (2.5,0) (0,0.4) (0.5,0.4) (1,0.4) (1.5,0.4) (2,0.4) (2.5,0.4) (0,0.8) (0.5,0.8) (1,0.8) (1.5,0.8) (2,0.8) (2.5,0.8) (0,1.2) (0.5,1.2) (1,1.2) (1.5,1.2) (2,1.2) (2.5,1.2) 
0: 1,0.5 6,0.4 7,0.640312 
1: 0,0.5 2,0.5 6,0.640312 7,0.4 8,0.640312 
2: 1,0.5 3,0.5 7,0.640312 8,0.4 9,0.640312 
3: 2,0.5 4,0.5 8,0.640312 9,0.4 10,0.640312 
4: 3,0.5 5,0.5 9,0.640312 10,0.4 11,0.640312 
5: 4,0.5 10,0.640312 11,0.4 
6: 0,0.4 1,0.640312 7,0.5 12,0.4 13,0.640312 
7: 0,0.640312 1,0.4 2,0.640312 6,0.5 8,0.5 12,0.640312 13,0.4 14,0.640312 
8: 1,0.640312 2,0.4 3,0.640312 7,0.5 9,0.5 13,0.640312 14,0.4 15,0.640312 
9: 2,0.640312 3,0.4 4,0.640312 8,0.5 10,0.5 14,0.640312 15,0.4 16,0.640312 
10: 3,0.640312 4,0.4 5,0.640312 9,0.5 11,0.5 15,0.640312 16,0.4 17,0.640312 
11: 4,0.640312 5,0.4 10,0.5 16,0.640312 17,0.4 
12: 6,0.4 7,0.640312 13,0.5 18,0.4 19,0.640312 
13: 6,0.640312 7,0.4 8,0.640312 12,0.5 14,0.5 18,0.640312 19,0.4 20,0.640312 
14: 7,0.640312 8,0.4 9,0.640312 13,0.5 15,0.5 19,0.640312 20,0.4 21,0.640312 
15: 8,0.640312 9,0.4 10,0.640312 14,0.5 16,0.5 20,0.640312 21,0.4 22,0.640312 
16: 9,0.640312 10,0.4 11,0.640312 15,0.5 17,0.5 21,0.640312 22,0.4 23,0.640312 
17: 10,0.640312 11,0.4 16,0.5 22,0.640312 23,0.4 
18: 12,0.4 13,0.640312 19,0.5 
19: 12,0.640312 13,0.4 14,0.640312 18,0.5 20,0.5 
20: 13,0.640312 14,0.4 15,0.640312 19,0.5 21,0.5 
21: 14,0.640312 15,0.4 16,0.640312 20,0.5 22,0.5 
22: 15,0.640312 16,0.4 17,0.640312 21,0.5 23,0.5 
23: 16,0.640312 17,0.4 22,0.5 

which is correct that it matches the output, the grip-map is used to follow the step2, 3, 4


#step1#
#wrong cases#

#test3#
Command:
Run  ./path-step1 grid-map-error0.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid edge data
Aborted (core dumped)
which is correct because it handle the error cases of edge data is not an unsigned int, but with character


#test4#
Command:
Run  ./path-step1 grid-map-error1.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid node data
Aborted (core dumped)
which is correct because it handle the error cases of node data is not an unsigned int, but with character


#test5#
Command:
Run  ./path-step1 grid-map-error2.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Missing $nodes section
Aborted (core dumped)
which is correct because it handle the error cases of no $nodes section


#test6#
Command:
Run  ./path-step1 grid-map-error3.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid node data
Aborted (core dumped)
which is correct because it handle the error cases of a line of blank node data



#test7#
Command:
Run  ./path-step1 grid-map-error4.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid node data
Aborted (core dumped)
which is correct because it handle the error cases of more than the required number of node input



#test8#
Command:
Run  ./path-step1 grid-map-error5.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid edge data
Aborted (core dumped)
which is correct because it handle the error cases of more than the required number of edge input


#test9#
Command:
Run  ./path-step1 grid-map-error6.txt
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Invalid edge data
Aborted (core dumped)
which is correct because it handle the error cases of less than the required number of edge input


#step2#
#correct cases#

#test10#
Command:
Run  ./path-step2 grid-map.txt 0 13
You will see that it prints the output: 
0 6 13 : 1.04031
which is correct since it matches the shortest path in our example case


#test11#
Command:
Run  ./path-step2 grid-map.txt 0 23
You will see that it prints the output: 
0 1 2 9 16 23 : 2.92094
which is correct since it matches the shortest path in our example case


#step2#
#wrong cases#

#test12#
Command:
Run  ./path-step2 grid-map.txt 1 -1
You will see that it prints the output: 
Error: Goal node must be a non-negative integer.
which is correct since the goal node is not a valid unsigned int.


#test13#
Command:
Run  ./path-step2 grid-map.txt -1 2
You will see that it prints the output: 
Error: Start node must be a non-negative integer.
which is correct since the start node is not a valid unsigned int.


#test14#
Command:
Run  ./path-step2 grid-map.txt 0 25
You will see that it prints the output: 
Invalid start node or goal node
which is correct since the goal node is not inside the grid-map.txt


#test15#
Command:
Run  ./path-step2 grid-map.txt 
You will see that it prints the output: 
Error: invalid command
which is correct since the input is nothing for the start and goal node


#test16#
Command:
Run  ./path-step2 grid-map.txt a 1
You will see that it prints the output: 
Error: Start node must be a non-negative integer.
which is correct since the start node is not a valid unsigned int, but a character


#test17#
Command:
Run  ./path-step2 grid-map.txt 1 3 5
You will see that it prints the output: 
Error: invalid command
which is correct since the number of command input is not matches the required



#step3#
#correct cases#

#test18#
Command:
Run ./path-step3 grid-map.txt obstacle.txt 0 23
You will see that it prints the output: 
0 6 13 20 21 22 23 : 3.18062
which is correct since it matches the description in the path-planing.txt


#test19#
Command:
Run ./path-step3 grid-map.txt obstacle.txt 0 13
You will see that it prints the output: 
0 6 13 : 1.04031
which is correct since it matches the description in the path-planing.txt


#step3#
#wrong cases#

#test20#
Command:
Run ./path-step3 grid-map.txt obstacle-error0.txt 0 23
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: '$obstacles' keyword not found in input file.
Aborted (core dumped)
which is correct since it deal with a obstacle with none $obstacles


#test21#
Command:
Run ./path-step3 grid-map.txt obstacle-error1.txt 0 23
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Non-integer value found in obstacle nodes list.
Aborted (core dumped)
which is correct since it deal with a obstacle with character


#test22#
Command:
Run ./path-step3 grid-map.txt obstacle-error2.txt 0 23
You will see that it prints the output: 
0 1 2 9 16 23 : 2.92094
which is correct, since the $obstacles is empty in this case


#test23#
Command:
Run ./path-step3 grid-map.txt obstacle-error3.txt 0 23
You will see that it prints the output: 
terminate called after throwing an instance of 'std::runtime_error'
  what():  Error: Non-integer value found in obstacle nodes list.
Aborted (core dumped)
which is correct, since there is character


#test24#
Command:
Run ./path-step3 grid-map.txt obstacle-error4.txt 0 23
You will see that it prints the output: 
No path exists between the start and goal nodes.
which is correct since the obstacle is out of the range of nodes



#test25#
Command:
Run ./path-step3 grid-map.txt obstacle-error5.txt 0 23
You will see that it prints the output: 
No path exists between the start and goal nodes.
which is correct because the obstacle blocks all the way from start to the goal node


#test26#
Command:
Run ./path-step3 grid-map.txt obstacle-error6.txt 0 23
You will see that it prints the output: 
No path exists between the start and goal nodes.
which is correct because there are 2 obstacles blocks all the way 

#step4#
#correct cases#

#test27#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 23 -a
You will see that it prints the output: 
0 7 13 20 21 22 23 : 3.18062
which is correct since it matches the description of A* in the path-planing.txt


#test28#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 23 
You will see that it prints the output: 
0 6 13 20 21 22 23 : 3.18062
which is correct since it matches the description of dijkstra in the path-planing.txt


#test29#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 15 -a
You will see that it prints the output: 
0 7 13 20 15 : 2.32094
which is correct since it matches the description of A* in the path-planing.txt


#test30#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 15
You will see that it prints the output: 
0 6 13 20 15 : 2.32094
which is correct since it matches the description of dijkstra in the path-planing.txt


#step4#
#wrong cases#
#test31#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 23 -b
You will see that it prints the output: 
Error: invalid option 
which is correct since we replace -a with -b



#test32#
Command:
Run ./path-step4 grid-map.txt obstacle.txt 0 23 -a -b
You will see that it prints the output: 
Error: invalid command number
which is correct since we have addition -b

